/*
    Copyright (c) 2019, Etienne de Foras and the respective contributors
    All rights reserved.

    Use of this source code is governed by a MIT-style license that can be found
    in the LICENSE.txt file.
*/

#include "KMeans.h"

#include "Matrix.h"

#include <cmath>
using namespace std;

/////////////////////////////////////////////////////////////////////////////////////////////////
KMeans::KMeans()
{ 
    _bTrainMode = false;
}
/////////////////////////////////////////////////////////////////////////////////////////////////
KMeans::~KMeans()
{
    clear();
}
/////////////////////////////////////////////////////////////////////////////////////////////////
void KMeans::clear()
{
    _bTrainMode=false;
}
/////////////////////////////////////////////////////////////////////////////////////////////////
void KMeans::set_train_mode(bool bTrainMode) // set to true if training, set to false if testing (default)
{
	_bTrainMode = bTrainMode;
}
/////////////////////////////////////////////////////////////////////////////////////////////////

/*Net& Net::operator=(const Net& other)
{
    clear();

    for(size_t i=0;i<other._layers.size();i++)
        _layers.push_back(other._layers[i]->clone());

    _bClassificationMode = other._bClassificationMode;

    return *this;
}
*/
/////////////////////////////////////////////////////////////////////////////////////////////////
void KMeans::set_ref_by_classes(int iRefByClasses)
{
	_iRefByCLasses = iRefByClasses;
}
/////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////
void KMeans::classify(const MatrixFloat& mIn, MatrixFloat& mClass) const
{
    MatrixFloat mOut;

	for (int i = 0; i < mOut.rows(); i++)
		mOut(i, 0) = std::roundf(mOut(i, 0)); //categorical case

}
/////////////////////////////////////////////////////////////////////////////////////////////
void KMeans::init()
{
}
/////////////////////////////////////////////////////////////////////////////////////////////